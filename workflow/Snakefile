# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.

import os, shutil, yaml
from pathlib import Path
import pandas as pd
from snakemake.utils import min_version, validate

##### set minimum snakemake version #####
min_version("8.0.0")


# define configfile, validate
configfile: "config/config.yaml"


validate(config, "schemas/config.schema.yaml")


# load runsheet, validate
runs = pd.read_csv(
    config["runsheet"], sep="\t", dtype={"run_id": str, "r1": str, "r2": str}
)
validate(runs, "schemas/runsheet.schema.yaml")
runs.set_index("run_id", inplace=True, drop=False)

# load patientsheet, validate
patients = pd.read_csv(config["patientsheet"], sep="\t", dtype={"patient_id": str})
validate(patients, "schemas/patientsheet.schema.yaml")
patients.set_index("patient_id", inplace=True, drop=False)

# copy config data to output directory
Path(config["outdir"]).mkdir(exist_ok=True)
shutil.copy("config/config.yaml", config["outdir"])
shutil.copy(config["runsheet"], config["outdir"])
shutil.copy(config["patientsheet"], config["outdir"])

# indicator variable for if this run is a test or not
config["istest"] = True if "ngs-test-data" in runs.r1[0] else False

refdata = {"fa": config["genome"], "gtf": config["genes"]}

assert os.path.exists(refdata["fa"]), "Test reference genome not found"
assert os.path.exists(refdata["gtf"]), "Test reference annotation not found"


# include rules in other files
include: "rules/ref.smk"
include: "rules/map_count.smk"
include: "rules/preprocess.smk"


# remove Veloctyo from soloFeatures to prevent expansion
if "Velocyto" in config["STARsolo"]["soloFeatures"]:
    config["STARsolo"]["soloFeatures"].remove("Velocyto")

# setup output
output = []
output.append(
    expand(
        rules.render_STARsolo_report.output,
        soloFeatures=config["STARsolo"]["soloFeatures"],
        outdir=config["outdir"],
    )
)

if config["use_Demuxlet"]:
    assert (
        "demuxlet_patients" in runs.columns
    ), "Demuxlet requires demuxlet_patients column in runsheet"

    include: "rules/demuxlet.smk"

    output.append(
        expand(
            rules.render_demuxlet_report.output,
            outdir=config["outdir"],
        )
    )


if ("Compass" in config) and config["Compass"]["use"]:
    assert "cplex" in config["Compass"], "Path to CPLEX not provided"
    assert os.path.exists(
        config["Compass"]["cplex"] + "/python/setup.py"
    ), "Path to CPLEX does not exist"

    include: "rules/compass.smk"

    output.append(
        expand(
            rules.run_compass.output,
            soloFeatures=config["STARsolo"]["soloFeatures"],
            outdir=config["outdir"],
        )
    )


rule all:
    input:
        output,
